/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.quanlinhasach.view;

import com.mycompany.quanlinhasach.dao.BaoCaoCongNoDAO;
import com.mycompany.quanlinhasach.model.BaoCaoCongNo;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.File;
import java.awt.Desktop;

import java.text.DecimalFormat;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author HOANG
 */
public class CongNo extends javax.swing.JPanel {


    /**
     * Creates new form CongNo
     */
    private BaoCaoCongNoDAO baoCaoCongNoDAO;
    private DefaultTableModel tblModel;
    private DecimalFormat formatter = new DecimalFormat("#,###");
    
    public CongNo() {
        initComponents();
        baoCaoCongNoDAO = new BaoCaoCongNoDAO();
        jTable1.setDefaultEditor(Object.class, null);
        initTable();
        loadDataToTable(); 
        loadComboBoxData();
    }
    
public final void initTable() {
    tblModel = new DefaultTableModel();
    String[] headerTbl = new String[]{"Mã báo cáo", "Tên khách hàng", "Nợ đầu", "Nợ cuối", "Phát sinh"};
    tblModel.setColumnIdentifiers(headerTbl);
    jTable1.setModel(tblModel);
    
    jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
    jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
    jTable1.getColumnModel().getColumn(2).setPreferredWidth(10);
    jTable1.getColumnModel().getColumn(3).setPreferredWidth(10);
    jTable1.getColumnModel().getColumn(4).setPreferredWidth(10);
    
    
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(SwingConstants.CENTER); 
    
    // Áp dụng renderer cho tất cả các cột
    for (int i = 0; i < jTable1.getColumnCount(); i++) {
        jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
    }
}

    public void loadDataToTable() {
        try {
            List<BaoCaoCongNo> baoCaoList = baoCaoCongNoDAO.getAllBaoCaoCongNo();
            tblModel.setRowCount(0);

            for (BaoCaoCongNo bc : baoCaoList) {
                tblModel.addRow(new Object[]{
                    bc.getMaBaoCaoCongNo(),
                    bc.getTenKhachHang(),
                    formatter.format(bc.getNoDau()),
                    formatter.format(bc.getNoCuoi()),
                    formatter.format(bc.getPhatSinh())
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
}
    
    public void loadComboBoxData() {
    List<Integer> months = baoCaoCongNoDAO.getDistinctMonths();
    List<Integer> years = baoCaoCongNoDAO.getDistinctYears();

    jComboBox2.addItem("Tất cả");
    for (Integer month : months) {
        jComboBox2.addItem(month.toString());
    }

    jComboBox1.addItem("Tất cả");
    for (Integer year : years) {
        jComboBox1.addItem(year.toString());
    }
}

private void searchByMonthYearAndName(Integer month, Integer year, String name) {
    tblModel.setRowCount(0); // Clear existing data
    List<BaoCaoCongNo> list = baoCaoCongNoDAO.getBaoCaoCongNoByMonthYearAndName(month, year, name);
    for (BaoCaoCongNo bc : list) {
        tblModel.addRow(new Object[]{
            bc.getMaBaoCaoCongNo(),
            bc.getTenKhachHang(),
            formatter.format(bc.getNoDau()),
            formatter.format(bc.getNoCuoi()),
            formatter.format(bc.getPhatSinh()),
        });
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButtondownload = new javax.swing.JButton();
        jButtonsearch = new javax.swing.JButton();
        jTextFieldsearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(860, 730));
        setMinimumSize(new java.awt.Dimension(860, 730));
        setPreferredSize(new java.awt.Dimension(860, 730));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(860, 83));
        jPanel2.setMinimumSize(new java.awt.Dimension(860, 83));
        jPanel2.setPreferredSize(new java.awt.Dimension(860, 83));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtondownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/download-to-storage-drive.png"))); // NOI18N
        jButtondownload.setBorder(null);
        jButtondownload.setBorderPainted(false);
        jButtondownload.setContentAreaFilled(false);
        jButtondownload.setFocusPainted(false);
        jButtondownload.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtondownload.setMaximumSize(new java.awt.Dimension(25, 25));
        jButtondownload.setMinimumSize(new java.awt.Dimension(25, 25));
        jButtondownload.setPreferredSize(new java.awt.Dimension(25, 25));
        jButtondownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtondownloadActionPerformed(evt);
            }
        });
        jPanel2.add(jButtondownload, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 30, -1, -1));

        jButtonsearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search-interface-symbol.png"))); // NOI18N
        jButtonsearch.setBorder(null);
        jButtonsearch.setBorderPainted(false);
        jButtonsearch.setContentAreaFilled(false);
        jButtonsearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonsearch.setMaximumSize(new java.awt.Dimension(25, 25));
        jButtonsearch.setMinimumSize(new java.awt.Dimension(25, 25));
        jButtonsearch.setPreferredSize(new java.awt.Dimension(25, 25));
        jButtonsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonsearchActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(725, 30, -1, -1));

        jTextFieldsearch.setBackground(new java.awt.Color(251, 234, 255));
        jTextFieldsearch.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jTextFieldsearch.setForeground(new java.awt.Color(132, 94, 194));
        jTextFieldsearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldsearch.setText("Tìm kiếm khách hàng");
        jTextFieldsearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(132, 94, 194), 2, true));
        jTextFieldsearch.setDisabledTextColor(new java.awt.Color(132, 94, 194));
        jTextFieldsearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jTextFieldsearch.setMaximumSize(new java.awt.Dimension(210, 40));
        jTextFieldsearch.setMinimumSize(new java.awt.Dimension(210, 40));
        jTextFieldsearch.setPreferredSize(new java.awt.Dimension(210, 40));
        jTextFieldsearch.setSelectedTextColor(new java.awt.Color(132, 94, 194));
        jTextFieldsearch.setSelectionColor(new java.awt.Color(251, 234, 255));
        jTextFieldsearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldsearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldsearchFocusLost(evt);
            }
        });
        jTextFieldsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldsearchActionPerformed(evt);
            }
        });
        jPanel2.add(jTextFieldsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, -1, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(132, 94, 194));
        jLabel2.setText("Năm");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(132, 94, 194));
        jLabel3.setText("Tháng");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        jComboBox1.setForeground(new java.awt.Color(132, 94, 194));
        jComboBox1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(132, 94, 194), 2, true));
        jPanel2.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 37, 120, 30));

        jComboBox2.setForeground(new java.awt.Color(132, 94, 194));
        jComboBox2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(132, 94, 194), 2, true));
        jPanel2.add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 100, 30));

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setMaximumSize(new java.awt.Dimension(860, 650));
        jPanel4.setMinimumSize(new java.awt.Dimension(860, 650));
        jPanel4.setName(""); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(860, 650));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Tên khách hàng", "Nợ đầu", "Phát sinh", "Nợ cuối"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setMaximumSize(new java.awt.Dimension(811, 569));
        jTable1.setMinimumSize(new java.awt.Dimension(811, 569));
        jTable1.setPreferredSize(new java.awt.Dimension(811, 569));
        jTable1.setRowHeight(44);
        jTable1.setShowGrid(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 801, 575));

        add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 83, -1, -1));

        jPanel1.setMaximumSize(new java.awt.Dimension(860, 730));
        jPanel1.setMinimumSize(new java.awt.Dimension(860, 730));
        jPanel1.setPreferredSize(new java.awt.Dimension(860, 730));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldsearchActionPerformed
        // TODO add your handling code here:
        jButtonsearchActionPerformed(evt);
    }//GEN-LAST:event_jTextFieldsearchActionPerformed

    private void jTextFieldsearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldsearchFocusGained
        // TODO add your handling code here:
        if (jTextFieldsearch.getText().equals("Tìm kiếm khách hàng")) {
                    jTextFieldsearch.setText("");
                }
    }//GEN-LAST:event_jTextFieldsearchFocusGained

    private void jTextFieldsearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldsearchFocusLost
        // TODO add your handling code here:
        if (jTextFieldsearch.getText().isEmpty()) {
                    jTextFieldsearch.setText("Tìm kiếm khách hàng");
                }
    }//GEN-LAST:event_jTextFieldsearchFocusLost

    private void jButtondownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtondownloadActionPerformed
        // TODO add your handling code here:                                           
    // Lấy thông tin từ các JComboBox và JTextField
Integer month = null;
Integer year = null;
String name = jTextFieldsearch.getText().trim();

if (!jComboBox2.getSelectedItem().toString().equals("Tất cả")) {
    month = Integer.parseInt(jComboBox2.getSelectedItem().toString());
}
if (!jComboBox1.getSelectedItem().toString().equals("Tất cả")) {
    year = Integer.parseInt(jComboBox1.getSelectedItem().toString());
}

// Tạo tên file dựa trên tháng và năm
String fileName = "CongNo.xlsx";
if (month != null) {
    fileName = "CongNo_Thang_" + month + ".xlsx";
}
if (year != null) {
    fileName = "CongNo_Nam_" + year + ".xlsx";
}
if (month != null && year != null) {
    fileName = "CongNo_Thang_" + month + "_Nam_" + year + ".xlsx";
}

// Mở JFileChooser để chọn nơi lưu file
JFileChooser fileChooser = new JFileChooser();
fileChooser.setSelectedFile(new File(fileName));
int userSelection = fileChooser.showSaveDialog(this);

if (userSelection == JFileChooser.APPROVE_OPTION) {
    File fileToSave = fileChooser.getSelectedFile();

    // Đảm bảo file có đuôi .xlsx
    if (!fileToSave.getName().endsWith(".xlsx")) {
        fileToSave = new File(fileToSave.getAbsolutePath() + ".xlsx");
    }

    // Kiểm tra nếu file đã tồn tại
    if (fileToSave.exists()) {
        int confirm = JOptionPane.showConfirmDialog(
                this,
                "File đã tồn tại. Bạn có muốn đổi tên không?",
                "Cảnh báo",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (confirm == JOptionPane.CANCEL_OPTION) {
            return; // Hủy thao tác
        } else if (confirm == JOptionPane.YES_OPTION) {
            // Người dùng chọn đổi tên, mở lại JFileChooser
            fileChooser.setSelectedFile(fileToSave);
            int newSelection = fileChooser.showSaveDialog(this);
            if (newSelection == JFileChooser.APPROVE_OPTION) {
                fileToSave = fileChooser.getSelectedFile();
                if (!fileToSave.getName().endsWith(".xlsx")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".xlsx");
                }
            } else {
                return; // Hủy thao tác nếu người dùng không chọn tên mới
            }
        }
        // Nếu chọn NO, tiếp tục ghi đè file
    }

    // Tạo workbook và sheet Excel
    try (Workbook workbook = new XSSFWorkbook()) {
        Sheet sheet = workbook.createSheet("Công nợ");

        int rowIndex = 0;

        // Thêm thông tin bộ lọc nếu có
        if (month != null || year != null || (name != null && !name.isEmpty())) {
            Row filterRow = sheet.createRow(rowIndex++);
            StringBuilder filterInfo = new StringBuilder("Filter: ");
            if (month != null) {
                filterInfo.append("Tháng: ").append(month).append(" ");
            }
            if (year != null) {
                filterInfo.append("Năm: ").append(year).append(" ");
            }
            if (name != null && !name.isEmpty() && !name.equals("Tìm kiếm khách hàng")) {
                filterInfo.append("Tên khách hàng: ").append(name).append(" ");
            }
            Cell filterCell = filterRow.createCell(0);
            filterCell.setCellValue(filterInfo.toString());
        }

        // Tạo header cho bảng
        Row headerRow = sheet.createRow(rowIndex++);
        for (int i = 0; i < tblModel.getColumnCount(); i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(tblModel.getColumnName(i));
        }

        // Tạo các hàng dữ liệu
        for (int i = 0; i < tblModel.getRowCount(); i++) {
            Row row = sheet.createRow(rowIndex++);
            for (int j = 0; j < tblModel.getColumnCount(); j++) {
                Cell cell = row.createCell(j);
                cell.setCellValue(tblModel.getValueAt(i, j).toString());
            }
        }

        // Lưu file ra đĩa
        try (FileOutputStream fileOut = new FileOutputStream(fileToSave)) {
            workbook.write(fileOut);
            fileOut.flush();
        }

        // Kiểm tra và mở file nếu tồn tại
        if (fileToSave.exists()) {
            Desktop.getDesktop().open(fileToSave);
        } else {
            JOptionPane.showMessageDialog(this, "Lưu file lỗi!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }

    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}

    }//GEN-LAST:event_jButtondownloadActionPerformed

    private void jButtonsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonsearchActionPerformed
        // TODO add your handling code here:
    Integer month = null;
    Integer year = null;
    String name = jTextFieldsearch.getText().trim();

    if (!jComboBox2.getSelectedItem().toString().equals("Tất cả")) {
        month = Integer.parseInt(jComboBox2.getSelectedItem().toString());
    }
    if (!jComboBox1.getSelectedItem().toString().equals("Tất cả")) {
        year = Integer.parseInt(jComboBox1.getSelectedItem().toString());
    }
    if (name.equals("Tìm kiếm khách hàng")) {
        name = "";
    }
    searchByMonthYearAndName(month, year, name);
}//GEN-LAST:event_jButtonsearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtondownload;
    private javax.swing.JButton jButtonsearch;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldsearch;
    // End of variables declaration//GEN-END:variables
}
